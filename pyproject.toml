[tool.pytest.ini_options]
pythonpath = [".", "src", "src/afs_v2"]
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--junitxml=outputs/test-results.xml",
    "--log-file=logs/pytest_debug.log",
    "--log-level=INFO",
    "--log-file-level=DEBUG",
    "--log-file-format=%(asctime)s - %(levelname)s - %(message)s",
    "--log-file-date-format=%Y-%m-%d %H:%M:%S",
    "--ignore=jax-docs",
    "--ignore=archive",
    "--ignore=background",
    "-m not optional",
    "-ra",
    "-q"
]
python_files = ["test_*.py", "*_test.py", "*_integration.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "experiments: marks tests as experiment tests (deselect with '-m \"not experiments\"')",
    "tuning: marks tests as parameter tuning tests (deselect with '-m \"not tuning\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "fda: marks tests as FDA compliance tests (deselect with '-m \"not fda\"')",
    "optional: opt-in tests that require large external data or long runtime"
]
filterwarnings = [
    # JAX dtype truncation warnings should now be rare since we enable x64 by default
    # If they appear, they're important to investigate
    "default"
]

# Mirror discovery behavior from legacy pytest.ini
norecursedirs = [
  "archive",
  "background",
  "backups",
  "logs",
  "outputs",
  ".venv",
  "venv",
  "build",
  "dist",
  ".*"
]

# -----------------------------
# Ruff Configuration (Fast Python Linter)
# -----------------------------
[tool.ruff]
# Only scan Python files in src/ and tests/
include = ["src/**/*.py", "tests/**/*.py"]
exclude = [
    # Standard Python excludes
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same line length as black
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable comprehensive rule set for maximum error detection
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "A",   # flake8-builtins
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "C90", # McCabe complexity
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T10", # flake8-debugger
    "DJ",  # flake8-django
    "N",   # pep8-naming
    "AIR", # Airflow
    "PERF",# Perflint
    "FURB",# refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

# Ignore some rules that don't apply to your project
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex (McCabe)
    "COM812", # trailing comma missing (conflicts with formatter)
    "ISC001", # implicit string concatenation (conflicts with formatter)
    "A003", # class attribute shadows builtin (too strict for some cases)
    "EM101", # exception message should not use f-string (too opinionated)
    "EM102", # exception message should not use .format() (too opinionated)
    "TRY003", # avoid specifying long messages outside exception class (too opinionated)
    "FBT001", # boolean positional arg in function definition (too strict)
    "FBT002", # boolean default positional argument (too strict)
    "FBT003", # boolean positional value in function call (too strict)
    "AIR", # Airflow rules (not using Airflow)
    "DJ", # Django rules (not using Django)
    "N999", # invalid module name (too strict for some cases)
]

[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__.py files
"__init__.py" = ["F401"]
# Allow print statements and debugger statements in test files
"tests/**/*" = ["T201", "T10"]
# Allow print statements in example/demo scripts
"scripts/**/*" = ["T201", "T10"]
# Allow some rules in configuration files
"setup.py" = ["INP001"]
"conftest.py" = ["INP001"]

[tool.ruff.lint.isort]
known-first-party = ["computable_flows_shim"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.flake8-import-conventions]
# Declare the conventions for import aliases.
[tool.ruff.lint.flake8-import-conventions.aliases]
"jax.numpy" = "jnp"
