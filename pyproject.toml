[project]
name = "afs"
version = "0.1.0"
description = "Computable Flows Shim"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "pydantic>=2.0.0",
    "pyarrow>=12.0.0",
    "duckdb>=1.0.0",
    "numpy",
    "scipy",
    "matplotlib",
    "pandas",
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "pylint>=2.15.0",
]

[project.optional-dependencies]
toml = [
    "toml>=0.10.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
]
dev = [
    "toml>=0.10.0",  # For enhanced manifest support
    "black>=22.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
pythonpath = [".", "src"]
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--junitxml=outputs/test-results.xml",
    "--log-file=logs/pytest_debug.log",
    "--log-level=INFO",
    "--log-file-level=DEBUG",
    "--log-file-format=%(asctime)s - %(levelname)s - %(message)s",
    "--log-file-date-format=%Y-%m-%d %H:%M:%S",
    "--ignore=jax-docs",
    "--ignore=archive",
    "--ignore=background",
    "-m not optional",
    "-ra",
    "-q"
]
python_files = ["test_*.py", "*_test.py", "*_integration.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "experiments: marks tests as experiment tests (deselect with '-m \"not experiments\"')",
    "tuning: marks tests as parameter tuning tests (deselect with '-m \"not tuning\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "fda: marks tests as FDA compliance tests (deselect with '-m \"not fda\"')",
    "optional: opt-in tests that require large external data or long runtime"
]
filterwarnings = [
    # JAX dtype truncation warnings should now be rare since we enable x64 by default
    # If they appear, they're important to investigate
    "default"
]

# Mirror discovery behavior from legacy pytest.ini
norecursedirs = [
  "archive",
  "background",
  "backups",
  "logs",
  "outputs",
  ".venv",
  "venv",
  "build",
  "dist",
  ".*"
]

[tool.ruff]
# Only scan src/ and tests/ directories
include = ["src/**/*.py", "tests/**/*.py"]

exclude = [
    # Standard Python excludes
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    # Documentation and non-Python files
    "*.md",
    "*.txt",
    "*.rst",
    "*.yml",
    "*.yaml",
    "*.json",
    "*.toml",
    "*.ini",
    "*.cfg",
    # Project-specific excludes
    "docs/",
    "qa_logs/",
    "archive/",
    "background/",
    "Design/",
    "logs/",
    "outputs/",
    "runs/",
    "test_output/",
]

# Same line length as black
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable comprehensive rule set for maximum error detection
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "A",   # flake8-builtins
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "C90", # McCabe complexity
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T10", # flake8-debugger
    "PERF",# Perflint
    "FURB",# refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

# Ignore some rules that don't apply to your project
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex (McCabe)
    "COM812", # trailing comma missing (conflicts with formatter)
    "ISC001", # implicit string concatenation (conflicts with formatter)
    "A003", # class attribute shadows builtin (too strict for some cases)
    "EM101", # exception message should not use f-string (too opinionated)
    "EM102", # exception message should not use .format() (too opinionated)
    "TRY003", # avoid specifying long messages outside exception class (too opinionated)
    "FBT001", # boolean positional arg in function definition (too strict)
    "FBT002", # boolean default positional argument (too strict)
    "FBT003", # boolean positional value in function call (too strict)
    "N999", # invalid module name (too strict for some cases)
    "E402", # module level import not at top of file (needed for JAX configuration)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Allow mathematical naming conventions in scientific code
"src/**/*.py" = [
    "N806",  # Mathematical variables: A, ATA, ATb, L_matrix, X, Y, T (matrices/operators)
    "N802",  # Mathematical functions: F_Dis, F_Proj, F_Multi, F_Con, L_apply, g_prox_in_W
    "N803",  # Mathematical arguments: L_apply, L_matrix
    "RUF002",  # Greek sigma in docstrings (mathematical notation)
    "RUF003",  # Greek sigma in comments (mathematical notation)
]
"tests/**/*.py" = [
    "N806",  # Mathematical variables in tests
    "N802",  # Mathematical functions in tests
    "N803",  # Mathematical arguments in tests
]

# Keep existing ignores
"__init__.py" = ["F401"]
"tests/**/*" = ["T201", "T10"]
"scripts/**/*" = ["T201", "T10", "E402"]
"setup.py" = ["INP001"]
"conftest.py" = ["INP001"]

[tool.ruff.lint.isort]
known-first-party = ["computable_flows_shim"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.flake8-import-conventions]
# Declare the conventions for import aliases.
[tool.ruff.lint.flake8-import-conventions.aliases]
"jax.numpy" = "jnp"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pylint.main]
init-hook = "import sys; sys.path.insert(0, 'src')"

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "W0613",  # unused-argument
]

# Allow mathematical naming conventions in scientific code
good-names = [
    # Mathematical variables (matrices, operators, coordinates)
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
    "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    # Mathematical compound expressions
    "ATA", "ATb", "ATB", "BTB", "L_matrix", "L_op", "L_apply",
    "effective_L_apply", "abs_L", "diag_abs_L",
    # Mathematical functions
    "L_apply", "L_w_space", "F_Dis", "F_Proj", "F_Multi", "F_Con",
    "g_prox_in_W", "g_prox",
    # Standard scientific abbreviations
    "dtype", "ndim", "ndims", "dtypes"
]

[tool.pylint.format]
max-line-length = 100
